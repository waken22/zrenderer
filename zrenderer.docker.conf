; Output directory where all rendered sprites will be saved to.
; Default value: output
outdir=output

; Path to the resource directory. All resources are tried to be found within
; this directory.
; Default value: 
resourcepath=resources

; Job id(s) which should be rendered. Can contain multiple comma separated
; values.
; Default value: 
;job=

; Gender of the player character. Possible values are: male or female.
; Default value: male
;gender=male

; Head id which should be used when drawing a player.
; Default value: 1
;head=1

; The alternative outfit for player characters. Not all characters have
; alternative outfits. In these cases the default character will be rendered
; instead. Value of 0 means no outfit.
; Default value: 0
;outfit=0

; Headgears which should be attached to the players head. Can contain up to 3
; comma separated values.
; Default value: 
;headgear=

; Garment which should be attached to the players body.
; Default value: 0
;garment=0

; Weapon which should be attached to the players body.
; Default value: 0
;weapon=0

; Shield which should be attached to the players body.
; Default value: 0
;shield=0

; Action of the job which should be drawn.
; Default value: 0
;action=0

; Frame of the action which should be drawn. Set to -1 to draw all frames.
; Default value: -1
;frame=-1

; Palette for the body sprite. Set to -1 to use the standard palette.
; Default value: -1
;bodyPalette=-1

; Palette for the head sprite. Set to -1 to use the standard palette.
; Default value: -1
;headPalette=-1

; Direction in which the head should turn. This is only applied to player
; sprites and only to the stand and sit action. Possible values are: straight,
; left, right or all. If 'all' is set then this direction system is ignored and
; all frames are interpreted like any other one.
; Default value: all
;headdir=all

; Draw shadow underneath the sprite.
; Default value: true
;enableShadow=true

; Ignore if a class job id is a baby.
; Default value: false
;ignoreBaby=false

; Generate single frames of an animation.
; Default value: false
;singleframes=false

; If enabled the output filenames will be the checksum of input parameters. This
; will ensure that each request creates a filename that is unique to the input
; parameters and no overlapping for the same job occurs.
; Default value: false
enableUniqueFilenames=true

; Whether to return already existing sprites (true) or always re-render it
; (false). You should only use this option in conjuction with
; 'enableUniqueFilenames=true'.
; Default value: false
returnExistingFiles=true

; Sets a canvas onto which the sprite should be rendered. The canvas requires
; two options: its size and an origin point inside the canvas where the sprite
; should be placed. The format is as following: <width>x<height>±<x>±<y>. An
; origin point of +0+0 is equal to the top left corner. Example:
; 200x250+100+125. This would create a canvas and place the sprite in the
; center.
; Default value: 
;canvas=

; Defines the output format. Possible values are 'png' or 'zip'. If zip is
; chosen the zip will contain png files.
; Default value: png
;outputFormat=png

; Log level. Defines the minimum level at which logs will be shown. Possible
; values are: all, trace, info, warning, error, critical, fatal or off.
; Default value: info
;loglevel=info

[server]
; Hostnames of the server. Can contain multiple comma separated values.
; Default value: localhost
hosts=::1,0.0.0.0

; Port of the server.
; Default value: 11011
port=11011

; Log file to write to. E.g. /var/log/zrenderer.log. Leaving it empty will log
; to stdout.
; Default value: 
;logfile=

; Access tokens file. File in which access tokens will be stored in. If the file
; does not exist it will be generated.
; Default value: accesstokens.conf
;tokenfile=accesstokens.conf

; Setting this to true will add CORS headers to all responses as well as adding
; an additional OPTIONS route that returns the CORS headers.
; Default value: false
;enableCORS=false

; Comma separated list of origins that are allowed access through CORS. Set this
; to a single '*' to allow access from any origin. Example:
; https://example.com.
; Default value: 
;allowCORSOrigin=

; Whether to use TLS/SSL to secure the connection. You will also need to set the
; certificate and private key when enabling this setting.
; Default value: false
;enableSSL=false

; Path to the certificate chain file used by TLS/SSL.
; Default value: 
;certificateChainFile=

; Path to the private key file used by TLS/SSL.
; Default value: 
;privateKeyFile=

